class ColumnType:
    """
    Database table column
    """
    name = None
    data_type = None
    comment = ""

    def __init__(self):
        pass


class TableType:
    """
    Database table
    """
    name = None
    comment = ""
    columns = []

    def __init__(self):
        pass


class DbSchemaType:
    """
    Represents database structure
    """
    dbname = None
    revision = None
    comment = ""

    """ :var DbTableType """
    tables = []

    def __init__(self):
        pass


class DocGenerator:
    db_schema = None

    def __init__(self, db_schema):
        """
        :param DbSchemaType db_schema: Database structure
        """
        self.db_schema = db_schema

    def generate(self):
        """
        Generates database documentation based on database schema
        :return: str
        """

        # Main Title
        title = '<h1>{dbname}</h1>'.format(dbname=self.db_schema.dbname)

        # Revision annotation
        revision = '<h3>Revision: %s</h2>' % self.db_schema.revision

        # Database schema description
        if self.db_schema.comment:
            db_description = '<p>{db_description}</p>'.format(db_description=str(self.db_schema.comment))
        else:
            db_description = '<p></p>'

        # List of database tables
        tables_list = '<u>Tables:</u><br>'
        tables_list += '<ul>'

        for table in self.db_schema.tables:
            tables_list += '<li><a href="#{table_name}">{table_name}</a></li>'.format(table_name=table.name)

        tables_list += '</ul>'

        # Tables section
        tables = ''

        for table in self.db_schema.tables:
            tables += '<h2 id="{table_name}">{table_name}</h2>'.format(table_name=table.name)

            # Table's description
            if table.comment:
                tables += '<p>%s</p>' % table.comment
            else:
                tables += '<p></p>'

            tables += '<h4>Fields</h4>'

            tables += '<table>'
            tables += '<thead>'
            tables += '<tr>'
            tables += '<th>Name</th>'
            tables += '<th>Data Type</th>'
            tables += '<th>Description</th>'
            tables += '</tr>'
            tables += '</thead>'
            tables += '<tbody>'

            # List a table's columns
            for column in table.columns:
                tables += '<tr>'
                tables += '<td>%s</td>' % column.name
                tables += '<td>%s</td>' % column.data_type

                if column.comment:
                    tables += '<td>%s</td>' % column.comment
                else:
                    tables += '<td></td>'

                tables += '<tr>'

            tables += '</tbody>'
            tables += '</table>'

            tables += '<hr>'

        # Generate final HTML
        html = """
        <DOCTYPE html>
        <html>
        <head>
            <title>Database Documentation :: {dbname} rev.{revision}</title>
        </head>
        <body>
            {dbname_title}
            {revision_title}
            {db_description_}
            {tables_list_}
            {tables_}
            <h5>Automatically generated by </u>dbmake</u></h5>
        </body
        </html>
        """.format(
            dbname=self.db_schema.dbname,
            revision=self.db_schema.revision,
            dbname_title=title,
            revision_title=revision,
            db_description_=db_description,
            tables_list_=tables_list,
            tables_=tables
        )

        return html
